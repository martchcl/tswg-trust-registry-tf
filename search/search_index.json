{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ToIP Trust Registry Protocol V1 Specification \u00a7 Working Draft Deliverable \u00a7 Editor\u2019s Note: This is currently a Draft Deliverable of the Trust Registry Task Force of the ToIP Technology Stack Working Group. For more on the structure of this Task Force and purpose of this deliverable, please see the TRTF home page . Status\u20142021-09-16: This deliverable is currently a Community Review Draft. The Trust Registry Task Force meeting is now meeting as part of the Technology Architecture Task Force meetings on Thursdays from 07:00-8:00 PT / 15:00-16:00 UTC and again at 1:00-2:00PM PT / 21:00-22:00 UTC. See the ToIP Calendar for Zoom meeting info. How to contribute: please add any comments or edits in Suggest Mode. The editors will periodically review and resolve new contributions. NOTE: All diagrams developed by contributors should be accompanied by the source. Table of Contents \u00a7 Contributors Terminology Purpose Motivations Conceptual Diagrams Scope Governing Authorities Trust Registry Service Property Trust Registry Protocol Data Model APPENDIX A: OpenAPI Specification Contributors \u00a7 To comply with the intellectual property rights protections in the charter of the ToIP Foundation (as required by all Joint Development Foundation projects hosted by the Linux Foundation), all contributors in any capacity to this Draft Deliverable MUST be current members of the ToIP Foundation. The following contributors each certify that they meet this requirement: Editors Darrell O'Donnell , Continuum Loop Inc. Drummond Reed , Evernym Contributors Antti Kettunen Dan Bachenheimer, Accenture Eric Drury, Forth Consulting Jim St. Clair, Lumedic Sankarshan Mukhopadhyay, Dhiway Scott Perry, Scott S. Perry CPA Vikas Malhotra, WOPLLI Technologies Terminology \u00a7 In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\", when appearing in ALL CAPITALS, are to be interpreted as described in RFC 2119 . All other terms in bold will be defined in one or more ToIP glossaries in the process specified by the ToIP Concepts and Terminology Working Group . Purpose \u00a7 The purpose of this ToIP specification is to define a standard interoperable protocol for interacting with a global web of peer trust registries , each of which can answer queries about whether a particular party is trusted and authorized to perform a particular action in a particular digital trust ecosystem , as well as which peer trust registries trust each other. Motivations \u00a7 A core role within Layer 4 of the ToIP stack is a trust registry (previously known as a member directory ). This is a network service that enables the governing authority for an ecosystem governance framework (EGF) to specify what governed parties are authorized to perform what actions under the EGF. For example: Which issuers are authorized to issue what types of verifiable credentials . Which verifiers are authorized to request what types of verifiable presentations . What other governing authorities are trusted to authorize which parties can perform what actions within their own trust registries . As with all layers of the ToIP stack , the purpose of a ToIP specification is to enable the technical interoperability necessary to support transitive trust within and between different trust communities implementing the ToIP stack . In this case, the desired interoperability outcome is a common protocol that works between any number of decentralized peer trust registries operated by independent governing authorities representing multiple legal and business jurisdictions . One specific example of this need is the digital trust ecosystem defined by the Interoperability Working Group for Good Health Pass (GHP). Conceptual Diagrams \u00a7 Figure 1 represents a conceptual overview of a digital trust ecosystem that illustrates the central role of a trust registry . Figure 1: Overview diagram of key components of a digital trust ecosystem Figure 2 is a conceptual overview of a network of independent trust registries representing different digital trust ecosystems , all of which can interoperate using the ToIP Trust Registry Protocol to enable transitive trust across any two ecosystems. Figure 2: A network of trust registries who are all peers Scope \u00a7 In the first version of this specification (V1), the following requirements represent specific limitations on scope. Subsequent versions MAY remove or revise these limitations. The ToIP Trust Registry Protocol V1 defined in this specification: SHALL support query operations for the current status of a registry entry . SHALL NOT support query operations for the history of a registry entry . This SHOULD be considered for V2. SHALL NOT support query operations for metadata about a trust registry . This SHOULD be considered for V2, including such attributes as: Legal name of trust registry service Legal name of trust registry operator (if different) Description Language variants supported (for text items returned) List of ecosystem governance frameworks (EGFs) served (DID, name, supported credential type URIs , supported presentation type URIs ) SHALL NOT include support for a DIDComm interface, only a REST interface. A DIDComm interface SHOULD be included in V2. SHALL NOT support the following capabilities, which should be considered in future versions: Automated rules processing. API-based operations for registering parties . An alternative architecture based on chained credentials as defined by the ToIP Authentic Chained Data Container (ACDC) specifications. Governing Authorities \u00a7 Governing authorities compliant with this specification: MUST have exactly one primary trust registry . MAY have zero or more secondary trust registries . (The primary trust registry plus all secondary trust registries are collectively the authorized trust registries .) MUST publish an EGF that meets the requirements in: This specification. The ToIP Governance Architecture Specification . Note that this includes the requirement that the EGF and all governed parties (which includes authorized issuers and authorized verifiers ) must be identified with a DID . MUST publish, in the DID document associated with the DID identifying its EGF , a service property **specifying the **service endpoint for its primary trust registry that meets the requirements in the Trust Registry Service Property section. MUST publish in its EGF a list of any other EGFs governing secondary trust registries. MUST specify in the EGF any additional requirements for an authorized trust registry , including: Information trust requirements . Technical requirements . Operational requirements . Legal contracts. MUST specify in its EGF (or in any referenced credential governance framework ) requirements for: An authorized issuer , including: The EGF URI that MUST be included as a claim in any authorized credential . The credential type URI that MUST be used for any authorized credential . An authorized verifier , including: The presentation type URI that an authorized verifier MUST use for any authorized presentation request . SHOULD specify in the EGF the following requirements for an authorized trust registry and any registered party (i.e., issuer, verifier, or peer trust registry): The set of DID methods authorized for use in the ecosystem. The requirements to become authorized. How to request registration. The requirements for assignment of each status value for a registry entry . Access control mechanisms. How to request access. Trust Registry Service Property \u00a7 The DID document for the DID that identifies an EGF compliant with this specification MUST include a service property that meets the requirements in section 5.4 of the W3C Decentralized Identifiers (DIDs) 1.0 specification plus the following additional requirements : The value of the type property MUST be TrustRegistry . The value of the serviceEndpoint property MUST be exactly one HTTPS URI. Trust Registry Protocol \u00a7 The authoritative technical specifications for the API calls in the ToIP Trust Registry Protocol V1 are specified in Appendix A (OpenAPI YAML file). This section contains a textual description of the requirements . Trust registries implementing this protocol: MUST maintain the service implementing this protocol at the HTTPS URI specified in the Trust Registry Service Property section. MUST return responses to queries for the status value of a registry entry that satisfies one or more of the following sets of query parameters: Authorized issuers : EGF URI, credential type URI , issuer URI Authorized verifiers : EGF URI, presentation type URI , verifier URI Trusted peer registries for authorized issuers: EGF URI, credential type URI , EGF URI Trusted peer registries for authorized verifiers: EGF URI, presentation type URI , EGF URI MUST return responses using the data model specified in the Data Model section. MUST return exactly one of the following status values for a registry entry satisfying the query parameters: Not found Current Expired (not renewed after the previous valid registration period) Terminated (voluntary termination by the registered party ) Revoked (involuntary termination by the governing authority ) For queries returning a status value other than Not Found , the response MUST return the following values: The parameter values exactly as supplied in the query (so responses can be stateless). The status value . Exactly two datetime values conforming to the following requirements: The value labels MUST be: AuthorizationStartDate AuthorizationEndDate The values MUST be formatted to comply with RFC 3339 in the UTC/Z time zone with no offset. The AuthorizationStartDate MUST be the date that the registered party\u2019s authorization began. The AuthorizationEndDate MUST be either: Null for an entry whose status value is Current at the time of the query. A specific date value if the registered party\u2019s status value is Expired , Terminated or Revoked. If a registered party has multiple entries (representing an authorization history), the most recent value MUST be returned. Data Model \u00a7 The authoritative technical specifications for the data model for requests and responses in the ToIP Trust Registry Protocol V1 are specified in Appendix A ( OpenAPI YAML file ). This section contains a textual description of the requirements. APPENDIX A: OpenAPI Specification \u00a7 The OpenAPI YAML file can be found here: https://github.com/trustoverip/tswg-trust-registry-tf/blob/main/api/toip.trustregistry.api.yaml <<TODO: to replace with a tagged commit once we have \u201clocked\u201d things down.>>","title":"Trust Registry Specification"},{"location":"#toip-trust-registry-protocol-v1-specification","text":"","title":"ToIP Trust Registry Protocol V1 Specification"},{"location":"#working-draft-deliverable","text":"Editor\u2019s Note: This is currently a Draft Deliverable of the Trust Registry Task Force of the ToIP Technology Stack Working Group. For more on the structure of this Task Force and purpose of this deliverable, please see the TRTF home page . Status\u20142021-09-16: This deliverable is currently a Community Review Draft. The Trust Registry Task Force meeting is now meeting as part of the Technology Architecture Task Force meetings on Thursdays from 07:00-8:00 PT / 15:00-16:00 UTC and again at 1:00-2:00PM PT / 21:00-22:00 UTC. See the ToIP Calendar for Zoom meeting info. How to contribute: please add any comments or edits in Suggest Mode. The editors will periodically review and resolve new contributions. NOTE: All diagrams developed by contributors should be accompanied by the source.","title":"Working Draft Deliverable"},{"location":"#table-of-contents","text":"Contributors Terminology Purpose Motivations Conceptual Diagrams Scope Governing Authorities Trust Registry Service Property Trust Registry Protocol Data Model APPENDIX A: OpenAPI Specification","title":"Table of Contents"},{"location":"#contributors","text":"To comply with the intellectual property rights protections in the charter of the ToIP Foundation (as required by all Joint Development Foundation projects hosted by the Linux Foundation), all contributors in any capacity to this Draft Deliverable MUST be current members of the ToIP Foundation. The following contributors each certify that they meet this requirement: Editors Darrell O'Donnell , Continuum Loop Inc. Drummond Reed , Evernym Contributors Antti Kettunen Dan Bachenheimer, Accenture Eric Drury, Forth Consulting Jim St. Clair, Lumedic Sankarshan Mukhopadhyay, Dhiway Scott Perry, Scott S. Perry CPA Vikas Malhotra, WOPLLI Technologies","title":"Contributors"},{"location":"#terminology","text":"In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\", when appearing in ALL CAPITALS, are to be interpreted as described in RFC 2119 . All other terms in bold will be defined in one or more ToIP glossaries in the process specified by the ToIP Concepts and Terminology Working Group .","title":"Terminology"},{"location":"#purpose","text":"The purpose of this ToIP specification is to define a standard interoperable protocol for interacting with a global web of peer trust registries , each of which can answer queries about whether a particular party is trusted and authorized to perform a particular action in a particular digital trust ecosystem , as well as which peer trust registries trust each other.","title":"Purpose"},{"location":"#motivations","text":"A core role within Layer 4 of the ToIP stack is a trust registry (previously known as a member directory ). This is a network service that enables the governing authority for an ecosystem governance framework (EGF) to specify what governed parties are authorized to perform what actions under the EGF. For example: Which issuers are authorized to issue what types of verifiable credentials . Which verifiers are authorized to request what types of verifiable presentations . What other governing authorities are trusted to authorize which parties can perform what actions within their own trust registries . As with all layers of the ToIP stack , the purpose of a ToIP specification is to enable the technical interoperability necessary to support transitive trust within and between different trust communities implementing the ToIP stack . In this case, the desired interoperability outcome is a common protocol that works between any number of decentralized peer trust registries operated by independent governing authorities representing multiple legal and business jurisdictions . One specific example of this need is the digital trust ecosystem defined by the Interoperability Working Group for Good Health Pass (GHP).","title":"Motivations"},{"location":"#conceptual-diagrams","text":"Figure 1 represents a conceptual overview of a digital trust ecosystem that illustrates the central role of a trust registry . Figure 1: Overview diagram of key components of a digital trust ecosystem Figure 2 is a conceptual overview of a network of independent trust registries representing different digital trust ecosystems , all of which can interoperate using the ToIP Trust Registry Protocol to enable transitive trust across any two ecosystems. Figure 2: A network of trust registries who are all peers","title":"Conceptual Diagrams"},{"location":"#scope","text":"In the first version of this specification (V1), the following requirements represent specific limitations on scope. Subsequent versions MAY remove or revise these limitations. The ToIP Trust Registry Protocol V1 defined in this specification: SHALL support query operations for the current status of a registry entry . SHALL NOT support query operations for the history of a registry entry . This SHOULD be considered for V2. SHALL NOT support query operations for metadata about a trust registry . This SHOULD be considered for V2, including such attributes as: Legal name of trust registry service Legal name of trust registry operator (if different) Description Language variants supported (for text items returned) List of ecosystem governance frameworks (EGFs) served (DID, name, supported credential type URIs , supported presentation type URIs ) SHALL NOT include support for a DIDComm interface, only a REST interface. A DIDComm interface SHOULD be included in V2. SHALL NOT support the following capabilities, which should be considered in future versions: Automated rules processing. API-based operations for registering parties . An alternative architecture based on chained credentials as defined by the ToIP Authentic Chained Data Container (ACDC) specifications.","title":"Scope"},{"location":"#governing-authorities","text":"Governing authorities compliant with this specification: MUST have exactly one primary trust registry . MAY have zero or more secondary trust registries . (The primary trust registry plus all secondary trust registries are collectively the authorized trust registries .) MUST publish an EGF that meets the requirements in: This specification. The ToIP Governance Architecture Specification . Note that this includes the requirement that the EGF and all governed parties (which includes authorized issuers and authorized verifiers ) must be identified with a DID . MUST publish, in the DID document associated with the DID identifying its EGF , a service property **specifying the **service endpoint for its primary trust registry that meets the requirements in the Trust Registry Service Property section. MUST publish in its EGF a list of any other EGFs governing secondary trust registries. MUST specify in the EGF any additional requirements for an authorized trust registry , including: Information trust requirements . Technical requirements . Operational requirements . Legal contracts. MUST specify in its EGF (or in any referenced credential governance framework ) requirements for: An authorized issuer , including: The EGF URI that MUST be included as a claim in any authorized credential . The credential type URI that MUST be used for any authorized credential . An authorized verifier , including: The presentation type URI that an authorized verifier MUST use for any authorized presentation request . SHOULD specify in the EGF the following requirements for an authorized trust registry and any registered party (i.e., issuer, verifier, or peer trust registry): The set of DID methods authorized for use in the ecosystem. The requirements to become authorized. How to request registration. The requirements for assignment of each status value for a registry entry . Access control mechanisms. How to request access.","title":"Governing Authorities"},{"location":"#trust-registry-service-property","text":"The DID document for the DID that identifies an EGF compliant with this specification MUST include a service property that meets the requirements in section 5.4 of the W3C Decentralized Identifiers (DIDs) 1.0 specification plus the following additional requirements : The value of the type property MUST be TrustRegistry . The value of the serviceEndpoint property MUST be exactly one HTTPS URI.","title":"Trust Registry Service Property"},{"location":"#trust-registry-protocol","text":"The authoritative technical specifications for the API calls in the ToIP Trust Registry Protocol V1 are specified in Appendix A (OpenAPI YAML file). This section contains a textual description of the requirements . Trust registries implementing this protocol: MUST maintain the service implementing this protocol at the HTTPS URI specified in the Trust Registry Service Property section. MUST return responses to queries for the status value of a registry entry that satisfies one or more of the following sets of query parameters: Authorized issuers : EGF URI, credential type URI , issuer URI Authorized verifiers : EGF URI, presentation type URI , verifier URI Trusted peer registries for authorized issuers: EGF URI, credential type URI , EGF URI Trusted peer registries for authorized verifiers: EGF URI, presentation type URI , EGF URI MUST return responses using the data model specified in the Data Model section. MUST return exactly one of the following status values for a registry entry satisfying the query parameters: Not found Current Expired (not renewed after the previous valid registration period) Terminated (voluntary termination by the registered party ) Revoked (involuntary termination by the governing authority ) For queries returning a status value other than Not Found , the response MUST return the following values: The parameter values exactly as supplied in the query (so responses can be stateless). The status value . Exactly two datetime values conforming to the following requirements: The value labels MUST be: AuthorizationStartDate AuthorizationEndDate The values MUST be formatted to comply with RFC 3339 in the UTC/Z time zone with no offset. The AuthorizationStartDate MUST be the date that the registered party\u2019s authorization began. The AuthorizationEndDate MUST be either: Null for an entry whose status value is Current at the time of the query. A specific date value if the registered party\u2019s status value is Expired , Terminated or Revoked. If a registered party has multiple entries (representing an authorization history), the most recent value MUST be returned.","title":"Trust Registry Protocol"},{"location":"#data-model","text":"The authoritative technical specifications for the data model for requests and responses in the ToIP Trust Registry Protocol V1 are specified in Appendix A ( OpenAPI YAML file ). This section contains a textual description of the requirements.","title":"Data Model"},{"location":"#appendix-a-openapi-specification","text":"The OpenAPI YAML file can be found here: https://github.com/trustoverip/tswg-trust-registry-tf/blob/main/api/toip.trustregistry.api.yaml <<TODO: to replace with a tagged commit once we have \u201clocked\u201d things down.>>","title":"APPENDIX A: OpenAPI Specification"},{"location":"versions/0.1.0/","text":"Version - 0.1.0 \u00a7 const ui = SwaggerUIBundle({ url: 'https://api.swaggerhub.com/apis/darrellodonnell/GHP.TrustRegistry/0.1.0', dom_id: '#swagger-ui', })","title":"HTTP API Definition"},{"location":"versions/0.1.0/#version-010","text":"const ui = SwaggerUIBundle({ url: 'https://api.swaggerhub.com/apis/darrellodonnell/GHP.TrustRegistry/0.1.0', dom_id: '#swagger-ui', })","title":"Version - 0.1.0"}]}